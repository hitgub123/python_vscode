# 基本設計書

## ドキュメント概要
本基本設計書は、出退勤システムの要件に基づき、システムの基本設計を定義するものである。日本IT業界の標準的な規範に従い、明確かつ構造化された記述を行う。

| ID | 作成者 | 作成日付 |
|---|---|---|
| req-011 | カエルXX | 2024-05-24 |

## システム概要
本システムは、従業員の勤怠状況や休暇を統合的に管理するシステムである。本設計書では、承認された休暇情報を従業員の勤怠データへ自動的に反映する、バックエンド機能について定義する。

## 要件定義
### 要件一覧
| ID | 分類 | 要件名 | 概要 | 利用者 |
|---|---|---|---|---|
| req-011 | 休暇管理 | 休暇データ自動反映 | 承認された休暇情報は、自動的に従業員の勤怠データに反映される。 | 人事部門、管理職 |

## 機能設計
### 休暇データ自動反映機能 (req-011)
#### 機能概要
管理職によって承認された休暇申請の内容を、夜間バッチ処理等により、対象従業員の該当日における勤怠データとして自動的に登録・更新する機能。これにより、手動でのデータ入力作業を不要とし、勤怠記録の正確性を担保する。

#### 入力仕様
- **処理対象**: 休暇申請テーブル(`T_LEAVE_APPLICATION`)にあり、ステータスが「承認済み」かつ、勤怠データへの「未反映」のレコード。

#### 出力仕様
- **処理結果**:
  - 勤怠記録テーブル(`T_DAILY_WORK_RECORD`)に、休暇情報を反映したレコードが作成または更新される。
    - 例：2025年7月7日のAさんの勤怠記録の勤務区分が「有給休暇」となる。
  - 休暇申請テーブルの該当レコードは「反映済み」ステータスに更新される。
  - バッチ処理の実行結果（処理件数、エラー件数）がシステムログに出力される。

#### 処理フロー
1.  システムが、予め定められたスケジュール（例：毎日深夜3:00）で本バッチ処理を起動する。
2.  休暇申請テーブルを検索し、ステータスが「承認済み」かつ勤怠反映ステータスが「未反映」の全レコードを取得する。
3.  取得した各申請レコードについて、以下の処理をループ実行する。
    a. 申請された休暇期間（開始日～終了日）の日付を1日ずつ処理対象とする。
    b. 対象日、対象従業員IDをキーに、日次勤怠記録テーブル(`T_DAILY_WORK_RECORD`)を検索する。
    c. レコードが存在すれば更新、存在しなければ新規作成し、勤務区分を申請された休暇種別（例：有給休暇、午前半休）に設定する。
    d. 処理が正常に完了した場合、休暇申請テーブルの勤怠反映ステータスを「反映済み」に更新する。
4.  全ての対象レコードの処理が完了後、バッチ処理を終了する。

#### エラー処理
- **データ不整合**: 勤怠記録の更新時に、既に対象日の勤怠が締め処理済みであるなど、不整合が発生した場合は、<font color="red">該当の申請データをエラーとして扱い、処理をスキップする。エラーとなった申請IDと理由は、別途エラーログに出力し、システム管理者に通知する。</font>
- **バッチ中断**: 処理の途中でデータベース接続断などの致命的なエラーが発生した場合、バッチは異常終了する。処理はトランザクション管理されており、中途半端な状態でデータが更新されることはない。再実行時には、未処理のレコード（「未反映」のままのレコード）のみが対象となる。

## データ設計
### データベース構造
#### 【新規】日次勤怠記録テーブル (T_DAILY_WORK_RECORD)
日々の最終的な勤務状況を格納するテーブル。打刻データと休暇データを統合した結果が記録される。
| 項目名 | データ型 | 説明 | 主キー |
|---|---|---|---|
| work_date | DATE | 勤務日 | ○ |
| employee_id | VARCHAR(10) | 従業員ID | ○ |
| work_classification | VARCHAR(2) | 勤務区分（01:通常出勤, 11:有給休暇, 12:午前半休...） | |
| start_time | TIME | 始業時刻 | |
| end_time | TIME | 終業時刻 | |

#### 休暇申請テーブル (T_LEAVE_APPLICATION) の更新
勤怠データへの反映状況を管理するため、カラムを追加する。
| 項目名 | データ型 | 説明 |
|---|---|---|
| ... | ... | ... |
| **reflection_status** | **VARCHAR(2)** | **勤怠反映ステータス（01:未反映, 02:反映済, 99:エラー）** |

## インターフェース設計
### 内部インターフェース
- 本機能はサーバー内部で実行されるバッチ処理であり、直接的なAPIエンドポイントやUIは存在しない。
- OSのスケジューラ（cron等）によって定期的に実行される。

## 非機能要件
### 性能
- 1,000件の承認済み休暇申請を10分以内に勤怠データへ反映完了できること。

### 信頼性
- バッチ処理は冪等性を保証すること。すなわち、何らかの理由で同じ処理が複数回実行されたとしても、結果が常に同じになるように設計する。

## テスト計画
### 単体テスト
- 各種休暇（全休、半休、複数日）が、日次勤怠記録テーブルに正しく反映されることを確認する。
- 処理済みの休暇申請レコードの反映ステータスが「反映済み」に更新されることを確認する。

### 結合テスト
- 休暇申請→承認→バッチ処理による勤怠データ反映、という一連のワークフローが正常に動作することを確認する。
- エラー処理のシナリオ（例：締め処理済みの勤怠データへの反映）で、エラーログが正しく記録され、対象データがスキップされることを確認する。

## 付録
### 用語集
- **勤怠データ**: 日々の出退勤時刻、勤務状況（出勤、休暇、欠勤など）を記録したデータ。
- **バッチ処理**: データを一括して処理する方式。本機能では夜間などに自動実行される。
- **冪等性（べきとうせい）**: ある操作を1回行っても、複数回行っても、結果が同じであるという性質。

### 参考資料
- 日本IT業界標準設計書テンプレート（JISA）
- 出退勤システム要件定義書（2025年6月版）